#!/usr/bin/python

import cgi
import codecs
from os.path import exists
from os import makedirs, system, listdir, remove, sep
from shutil import copy, copytree
from Cheetah.Template import Template
from coursemanager import CourseManager
from xmlreader import readConfig


#publish_doc_root = "/var/www/html/python/eXe/publish/"
#publish_choice_form = publish_doc_root + "choose_publish_form.template"
publishcgi  = "/publish/publish.pyg"
publish_cmd = "publish_course"


##enable cgi traceback
import cgitb
cgitb.enable( display=0, logdir="/var/tmp/httpd/exe" )

debug = 1
class PublishManager(CourseManager):

	def view_course( self, form ):
		"""Take an course file name as a parameter and creates and displays an course object for it"""

		#read course content from courses.xml#
		try:
			course_identifier = form["courseidentifier"].value
			self.get_course_detail( course_identifier )
		except:
			print "Can't get the course detail \n"
			return
			
		#show course content#
		self.publish_course_content( form )

		
	def outline_course( self, form, publish_course="" ):
			
		#show course topic tree#
		#for each topic of the course#
		if publish_course=="":
			content = self.show_course_topics( ret_str=1, for_topic_tree=1)
		else:
			content = self.show_course_topics( ret_str=1, for_topic_tree=1, publish_course="%s" %publish_course, for_course=1 )
		#heading = self.dict["title"]
		#crumb = ""
		#preview = self.previewcgi + "?courseidentifier=%s" % self.dict["courseidentifier"]
		#outline = self.startcgi + "?cmd=outline_course&courseidentifier=%s" % self.dict["courseidentifier"]
		#content += self.showexe( self.theme_template, heading, content, crumb, preview, outline, )
		return content
		
	def publish_course_content( self, query, publish_course="", publish_mode=0 ):
		"""publish_course: the template directory to be used for publishing"""
		#Write HTML fo browser (standard output), read from template file+Cheetah		
		if exists( self.course_content_template ):
			
			content = self.xml_string( self.course_content_template, self.dict )
			
			#x = str( self.outline_course( query, publish_course ) )
			#content = content + x
			self.content_dict["sub_index"] = str( self.outline_course( query, publish_course ) )
			
			if self.preview_dir=="" or publish_course<>"": 
				heading = self.dict["title"] 
			else:
				heading = self.dict["title"] + " <span style='color: #ccc;'>Preview</span>" 
				
			crumb = ""
			preview = self.previewcgi + "?courseidentifier=%s" % self.dict["courseidentifier"]
			outline = self.startcgi + "?cmd=outline_course&courseidentifier=%s%s" % ( self.dict["courseidentifier"], self.preview_cgi_string )
			str_button =  "<p><center><form action=%s method=post> <input type=hidden name=cmd value=%s><input type=hidden name=courseidentifier value=%s><input type=hidden name=publish_dir value=%s> <input type=submit name=publish value='Use this template to publish'>  to zip file:<input type=text name=zipfile  maxlength=40 size=20></form></center>" %( publishcgi, publish_cmd, self.dict["courseidentifier"], self.content_dict["preview_dir"]) 
			if debug: print "Theme template:%s<br>\n" % self.theme_template
			if publish_course<>"":
				#for publishing course content#
				return self.showexe( self.theme_template, heading, content, crumb, preview, outline,return_str=1, publish_mode=publish_mode )
			else:
				print str_button
				print self.showexe( self.theme_template, heading, content, crumb, preview, outline,return_str=1, publish_mode=publish_mode )
			
		else:
			print "Error:template file:%s not exist"  %self.course_content_template
			
	def publish_topic_content( self, publish_course="", publish_mode=0 ):
		#Write HTML fo browser (standard output), read from template file+Cheetah		
		if exists( self.topic_content_template ):
			content = self.xml_string( self.topic_content_template, self.content_dict )
			icon_dir = "../images"
			content += "\n<br>" + self.show_idevices("topic", icon_dir )
			
			self.content_dict["sub_index"] = self.show_topic_sections(  ret_str=1, for_topic_tree=1, publish_course="%s" % publish_course, for_topic=1 )
			#content = content + x
			#print content
			
			heading = self.topic_dict["title"] 
			crumb = "<table border=0><tr><td><a href=../index.html>%s</a> </td><td>-></td><td> %s </td></tr></table>\n" % ( self.dict["title"], self.topic_dict["title"])
			#print "crumb:%s <br>\n" % crumb
			preview = ""
			outline = ""
			

			#print x
			if self.content_dict.has_key("zipfile"):
				topic_publish_dir = self.doc_root + self.dict["courseidentifier"] + "/publish/" + self.content_dict["zipfile"] + sep + self.topic_dict["topicidentifier"]
			else:
				topic_publish_dir = self.doc_root + self.dict["courseidentifier"] + "/publish/" + self.content_dict["publish_dir"] + sep + self.topic_dict["topicidentifier"]
			
			if not exists( topic_publish_dir ):
				try:
					makedirs( topic_publish_dir )
				except:
					print "Error, fail to create directory: %s <br>" % topic_publish_dir
					exit
				
				
			#copy files#
			usefiles = self.content_template_directory + self.content_dict["publish_dir"] + sep +"files"
			#usefiles = self.content_template_directory + self.preview_dir + sep + "files" 
			dst_usefiles = topic_publish_dir
			cp_cmd = "/bin/cp -pfr %s %s" % ( usefiles, dst_usefiles )
			if debug: print "course:system(%s) <br>\n" %cp_cmd
			system( cp_cmd )
			
			#copy images directory #
			img_dir = self.doc_root + self.dict["courseidentifier"]+ sep + self.topic_dict["topicidentifier"] + sep + "images"
			dst_img_dir = topic_publish_dir + sep + "images"
			if exists( img_dir ):
				if not exists( dst_img_dir ):
					try:
						makedirs( dst_img_dir )
					except:
						print "Error, fail to create directory: %s <br>" % dst_img_dir
						exit
			
				cp_cmd = "/bin/cp -pfr %s/. %s" % (img_dir, dst_img_dir )
				#print "section:system(%s)<br>\n" %cp_cmd
				system( cp_cmd )
			#copy course images#
			img_dir = self.doc_root + self.dict["courseidentifier"]+ sep +"images/."
			cp_cmd = "/bin/cp -pfr %s %s" % (img_dir, dst_img_dir )
			#print "course:system(%s) <br>\n" %cp_cmd
			system( cp_cmd )
				
			target_file= topic_publish_dir + sep + 'topic%s.html'%self.topic_dict["topicidentifier"]
			#print "topic file: %s <br>\n" % target_file
			
			#generate content here, because get_related_urls will change topic_dict, etc#
			x = self.showexe( self.theme_template, heading, content, crumb, preview, outline,return_str=1, publish_mode=publish_mode, current_url="%s"%(self.topic_dict["topicidentifier"]) )
			f = codecs.open( target_file ,"w", "iso-8859-1" )
			f.write( "%s" %x )
			f.flush()
			f.close
			
			
		else:
			print "Error:topic template file:%s not exist"  %self.topic_content_template
	
	def publish_section_content( self, publish_course="", publish_mode=0 ):
		#Write HTML fo browser (standard output), read from template file+Cheetah		
		if exists( self.section_content_template ):
			
			content = self.xml_string( self.section_content_template, self.content_dict )
			icon_dir = "../../images"
			content += "\n<br>" + self.show_idevices( "section", icon_dir )
			self.content_dict["sub_index"] = self.show_section_units(  ret_str=1, for_topic_tree=1, publish_course="%s" % publish_course, for_section=1 )
			#content = content + x
			#print content
			
			heading = self.section_dict["title"] 
			crumb = "<a href=../../index.html>%s</a> -> <a href=../topic%s.html>%s</a> -> %s \n" % ( self.content_dict["title"], self.content_dict["topicidentifier"], self.topic_dict["title"], self.section_dict["title"] )
			#print "crumb:%s <br>\n" % crumb
			preview = ""
			outline = ""
			
			#print x
			if self.content_dict.has_key("zipfile"):
				section_course_publish_dir = self.doc_root + self.content_dict["courseidentifier"] + "/publish/" + self.content_dict["zipfile"] + sep + self.content_dict["topicidentifier"]+ sep + self.section_dict["sectionidentifier"]
			else:
				section_course_publish_dir = self.doc_root + self.content_dict["courseidentifier"] + "/publish/" + self.content_dict["publish_dir"] + sep + self.content_dict["topicidentifier"]+ sep + self.section_dict["sectionidentifier"]
				
			if not exists( section_course_publish_dir ):
				try:
					makedirs( section_course_publish_dir )
				except:
					print "Error, fail to create directory: %s <br>" % section_course_publish_dir
					exit
			#cssfile = self.content_template_directory + self.preview_dir + sep + "template.css" 
			#dst_cssfile = topic_publish_dir + sep + "template.css"
			
			#copy template files#
			usefiles = self.content_template_directory + self.content_dict["publish_dir"] + sep +"files"
			#usefiles = self.content_template_directory +  self.preview_dir + sep + "files"
			dst_usefiles = section_course_publish_dir + sep + "files"
			cp_cmd = "/bin/cp -pfr %s %s" % ( usefiles, dst_usefiles )
			if debug: print "course:system(%s) <br>\n" %cp_cmd
			system( cp_cmd )
			
			#copy section images directory #
			img_dir = self.doc_root + self.content_dict["courseidentifier"]+ sep + self.content_dict["topicidentifier"] + sep + self.section_dict["sectionidentifier"] + sep + "images"
			dst_img_dir = section_course_publish_dir + sep + "images"
			if exists( img_dir ):
				if not exists( dst_img_dir ):
					try:
						makedirs( dst_img_dir )
					except:
						print "Error, fail to create directory: %s <br>" % dst_img_dir
						exit
			
				cp_cmd = "/bin/cp -pfr %s/. %s" % (img_dir, dst_img_dir )
				#print "section:system(%s)<br>\n" %cp_cmd
				system( cp_cmd )
			
			#copy course images
			img_dir = self.doc_root + self.content_dict["courseidentifier"] + sep + "images/."
			cp_cmd = "/bin/cp -pfr %s %s" % (img_dir, dst_img_dir )
			#print "course:system(%s) <br>\n" %cp_cmd
			system( cp_cmd )
					
			target_file= section_course_publish_dir + sep +  'section%s.html'%self.section_dict["sectionidentifier"]
			#print "section file: %s <br>\n" % target_file
			if debug: print "in publish section: current_url=%s/%s<br>\n" %(self.content_dict["topicidentifier"], self.section_dict["sectionidentifier"] )
			x = self.showexe( self.theme_template, heading, content, crumb, preview, outline,return_str=1, publish_mode=publish_mode, current_url="%s/%s" %(self.content_dict["topicidentifier"], self.section_dict["sectionidentifier"] )  )
			
			f = codecs.open( target_file ,"w", "iso-8859-1" )
			f.write( "%s" %x )
			f.flush()
			f.close
			
			
		else:
			print "Error:section template file:%s not exist"  %self.section_content_template

	def publish_unit_content( self, publish_course="", publish_mode=0 ):
		#Write HTML fo browser (standard output), read from template file+Cheetah		
		if exists( self.unit_content_template ):
			content = self.xml_string( self.unit_content_template, self.unit_dict )
			icon_dir = "../../../images"
			content += "\n<br>" + self.show_idevices( "unit", icon_dir )
			#print content
			
			heading = self.unit_dict["title"] 
			crumb = "<a href=../../../index.html>%s</a> -> <a href=../../topic%s.html>%s</a> -> <a href=../section%s.html>%s</a> -> %s \n"\
					 % ( self.dict["title"], self.topic_dict["topicidentifier"], self.topic_dict["title"], self.section_dict["sectionidentifier"], self.section_dict["title"], self.unit_dict["title"] )
			#print "crumb:%s <br>\n" % crumb
			preview = ""
			outline = ""
			
			if self.content_dict.has_key("zipfile"):
				unit_course_publish_dir = self.doc_root + self.content_dict["courseidentifier"] + sep + "publish" + sep + self.content_dict["zipfile"] + sep + self.content_dict["topicidentifier"] + sep + self.content_dict["sectionidentifier"]+ sep + self.unit_dict["unitidentifier"]
			else:
				unit_course_publish_dir = self.doc_root + self.content_dict["courseidentifier"] +  sep + "publish" + sep + self.content_dict["publish_dir"] + sep + self.content_dict["topicidentifier"] + sep + self.content_dict["sectionidentifier"]+ sep + self.unit_dict["unitidentifier"]
				
			if not exists( unit_course_publish_dir ):
				try:
					makedirs( unit_course_publish_dir )
				except:
					print "Error, fail to create directory: %s <br>" % unit_course_publish_dir
					exit
			
			#copy template files#
			usefiles = self.content_template_directory + self.content_dict["publish_dir"] + sep +"files"
			#usefiles = self.content_template_directory +  self.preview_dir + sep + "files"
			dst_usefiles = unit_course_publish_dir + sep + "files"
			cp_cmd = "/bin/cp -pfr %s %s" % ( usefiles, dst_usefiles )
			if debug: print "course:system(%s) <br>\n" %cp_cmd
			system( cp_cmd )
					
			#copy images directory #
			img_dir = self.doc_root + self.content_dict["courseidentifier"]+ sep + self.content_dict["topicidentifier"] + sep + self.content_dict["sectionidentifier"]+ sep+ self.unit_dict["unitidentifier"] + sep + "images"
			dst_img_dir = unit_course_publish_dir + sep + "images"
			if exists( img_dir ):
				if not exists( dst_img_dir ):
					try:
						makedirs( dst_img_dir )
					except:
						print "Error, fail to create directory: %s <br>" % dst_img_dir
						exit
			
				cp_cmd = "/bin/cp -pfr %s/. %s" % (img_dir, dst_img_dir )
				#print "unit:system(%s)<br>\n" %cp_cmd
				system( cp_cmd )
			
			img_dir = self.doc_root + self.content_dict["courseidentifier"] + sep + "images/."
			cp_cmd = "/bin/cp -pfr %s %s" % (img_dir, dst_img_dir )
			#print "course:system(%s) <br>\n" %cp_cmd
			system( cp_cmd )

								
			target_file= unit_course_publish_dir + sep + 'unit%s.html'%self.unit_dict["unitidentifier"]
			#print "unit file: %s <br>\n" % target_file
			if debug: print """in publish unit: current_url="%s/%s/%s"<br>\n""" %(self.content_dict["topicidentifier"], self.content_dict["sectionidentifier"], self.unit_dict["unitidentifier"] )

			if debug: print "in publish unit content, publish_mode=%d<br>\n" %publish_mode
			x = self.showexe( self.theme_template, heading, content, crumb, preview, outline,return_str=1, publish_mode=publish_mode, current_url="%s/%s/%s"%(self.content_dict["topicidentifier"], self.content_dict["sectionidentifier"], self.unit_dict["unitidentifier"] )  )

			f = codecs.open( target_file ,"w", "iso-8859-1" )
			f.write( "%s" %x )
			f.flush()
			f.close
			
			
		else:
			print "Error:unit template file:%s not exist"  %self.unit_content_template

						
			
	def show_publish_choice( self, form ):
		#read the pre-designed form and show it
	
		content_dict = {}
		content_dict["publishcgi"] = publishcgi
		#read some info:courseidentifier, crumb, headings, etc, into content_dict if necessary #
		
		for item in form.keys():
			content_dict[item]=form[item].value
			
		content_dict["content"]=""
		
		#read the course information#
		if content_dict.has_key( "courseidentifier" ):
			self.get_course_detail( content_dict["courseidentifier"] )
		else:
			print "Error, course not specified <br>\n"
			return
		if self.dict["coursetype"]<>"":
			publish_choice_form = self.doc_root + self.dict["coursetype"] + sep + "choose_publish_form.template"
		else:
			publish_choice_form = self.doc_root +  "choose_publish_form.template"
			
		#show if there are any previous publishings#
		course_publish_dir = self.doc_root + content_dict["courseidentifier"] + '/publish'
		if exists( course_publish_dir ):
			#get the zip file name from course_publish_dir#
			publish_list = listdir( course_publish_dir )
			content_dict["content"] = "Previous published files:<p>\n"
			for f in publish_list:
				if f[-3:]=="zip":
					content_dict["content"] += "<a href='%s%s/publish/%s'><img alt=\"download\" border=0 src=\"%simages/compressed.gif\">%s</a> \n" % ( self.www_eXe_root, content_dict["courseidentifier"], f, self.www_eXe_root, f )
					content_dict["content"] += "<a href='%s?cmd=delzipfile&courseidentifier=%s&fname=%s'>delete</a> <p>\n" % ( publishcgi, content_dict["courseidentifier"], f )
		
		content_dict["title"]=""
		content_dict["crumb"]=""
		
		if exists( publish_choice_form ):
			x = Template( file="%s" %publish_choice_form, searchList=[ content_dict ])
			print x
		else:
			print "Error, preview choice form:%s not exist" % publish_choice_form
	
	def publish_course_preview( self, form ):

		#read form input and #
		for item in form.keys():
			self.content_dict[item]=form[item].value
			
		#get course detail#
		if self.content_dict["courseidentifier"]<>"":
			self.get_course_detail( self.content_dict["courseidentifier"] )
		else:
			print "Error, course not specified <br>\n"
			
		#if user choose the preview identifier#
		if self.content_dict.has_key( "preview_dir" ):
			#am.theme_template = self.content_template_directory + self.content_dict["preview_dir"] +'/' +"index_content.template"
			if debug:
				print "theme_template:%s <br>\n" %self.theme_template
			if exists( self.theme_template ):
				self.view_course( form )
			else:
				print "Error, preview template:%s not exist" % am.theme_template
		else:
			print "Error, preview template not given"
			
	def publish_course( self, form ):
		"""Generate course html files and publish to user's pc"""
		
		#generate course html file#
		#read form input#
		for item in form.keys():
			self.content_dict[item]=form[item].value
			
		#if user choose the publish#
		if self.content_dict.has_key( "publish_dir" ) and self.content_dict.has_key( "courseidentifier" ) :
			if self.content_dict.has_key("zipfile"):
				course_publish_dir = self.doc_root + self.content_dict["courseidentifier"] + "/publish/" + self.content_dict["zipfile"]
			else:
				course_publish_dir = self.doc_root + self.content_dict["courseidentifier"] + "/publish/" + self.content_dict["publish_dir"]
			
			#if publish dir not exist in course dir, create it#
			#print "course_publish_dir:%s<p>\n" % course_publish_dir
			if not exists( course_publish_dir ):
				try:
					makedirs( course_publish_dir )
				except:
					print "Error, fail to create directory: %s <br>" % course_publish_dir
					exit
			
			#copy the imsmanifest.xml to the publish dir#
			imsfile = self.doc_root + self.content_dict["courseidentifier"] + "/imsmanifest.xml"
			#print "imsfile:%s <br>\n" % imsfile
			dst_imsfile = course_publish_dir + "/imsmanifest.xml"
			if debug: print "dst_imsfile:%s <br>\n" % dst_imsfile
			copy( imsfile, dst_imsfile )
			
			#copy the css , icon and images directory #
			#copy files: css, js ...#
			#cssfile = self.content_template_directory + self.content_dict["publish_dir"] + sep +"template.css"
			#dst_cssfile = course_publish_dir + "/template.css"
			#copy( cssfile, dst_cssfile )
			usefiles = self.content_template_directory + self.content_dict["publish_dir"] + sep +"files"
			dst_usefiles = course_publish_dir 
			cp_cmd = "/bin/cp -pfr %s %s" % ( usefiles, dst_usefiles )
			if debug: print "course:system(%s) <br>\n" %cp_cmd
			system( cp_cmd )
						
			#copy course images directory #
			img_dir = self.doc_root + self.content_dict["courseidentifier"]+ "/images"
			dst_img_dir = course_publish_dir + "/images"
			if exists( img_dir ):
				if not exists( dst_img_dir ):
					try:
						makedirs( dst_img_dir )
					except:
						print "Error, fail to create directory: %s <br>" % dst_img_dir
						exit
			
				cp_cmd = "/bin/cp -pfr %s/. %s" % (img_dir, dst_img_dir )
				if debug: print "course:system(%s) <br>\n" %cp_cmd
				system( cp_cmd )
			
			#if no course image create it#
			#if self.dict["graphic"]=="":
			#	# /usr/bin/convert -pointsize 24 -font Candice label:'%s'  -append -geometry 800x200  -mattecolor blue -frame 25x25+0+25 course.gif
			#	cp_cmd =  "/usr/bin/convert -pointsize 24 -font Candice label:'%s'  -append -geometry 800x200  -mattecolor blue -frame 25x25+0+25 %s/course.gif" %( self.dict["title"], dst_img_dir )
			#	if debug: print "course:system(%s) <br>\n" %cp_cmd
			#	system( cp_cmd )
			
			#img_dir = self.doc_root + "/images"
			#cp_cmd = "/bin/cp -pfr %s/bar_bg.png %s" % (img_dir, dst_img_dir )
			#print "course:system(%s) <br>\n" %cp_cmd
			#system( cp_cmd )
			
			#copy template/icon directory#
			icon_dir = self.content_template_directory + "%s/images" % self.content_dict["publish_dir"]
			dst_icon_dir = course_publish_dir + "/images"
			if exists( icon_dir ):
				if not exists( dst_icon_dir ):
					try:
						makedirs( dst_icon_dir )
					except:
						print "Error, fail to create directory: %s <br>" % dst_icon_dir
						exit
			
				cp_cmd = "/bin/cp -pfr %s/. %s" % (icon_dir, dst_icon_dir )
				if debug: print "course:system(%s) <br>\n" %cp_cmd
				system( cp_cmd )
			
			#publish course page#
			##############################################################################################
			self.get_course_detail( self.content_dict["courseidentifier"] )
			self.content_dict.update( self.dict )
			x = self.publish_course_content( form, publish_course="%s" % form["publish_dir"].value, publish_mode=1 )
			if debug: print x
			target_file= course_publish_dir + '/index.html'
			#print "course file: %s <br>\n" % target_file
			
			f = codecs.open( target_file ,"w", "iso-8859-1" )
			f.write( "%s" %x )
			f.flush()
			f.close
			
			#publish topic pages#
			##############################################################################################
			course_topicxmlfile = self.doc_root + self.dict["courseidentifier"] + '/' + self.topicxmlfile
			#print "coursetopicxml:%s" %(course_topicxmlfile)
			#try:
			if exists( course_topicxmlfile ): 

				doc = readConfig( course_topicxmlfile )
				for node in doc["topics"]:
					#clear the previous cashed items in the nested loop#
					self.topic_dict.clear()
					self.section_dict.clear()
					self.unit_dict.clear()
					
					#initalize topic dictionary#
					#self.read_topic_dict()
					self.content_dict.update( node  )
					self.topic_dict.update( node  )
					self.publish_topic_content( self.content_dict["publish_dir"], publish_mode=1 )
					
					#publish section pages#
					##############################################################################################
					course_sectionxmlfile = self.doc_root + self.dict["courseidentifier"] + '/' + self.content_dict["topicidentifier"] + '/' + self.sectionxmlfile
					#print "course_sectionxml:%s" %(course_sectionxmlfile)
					#try:
					if exists( course_sectionxmlfile ): 
						doc_section = readConfig( course_sectionxmlfile )
						for node_section in doc_section["sections"]:
							self.section_dict.clear()
							self.unit_dict.clear()

							#try:
							#self.read_section_dict()
							self.content_dict.update( node_section  )
							self.section_dict.update( node_section  )
							self.publish_section_content( self.content_dict["publish_dir"], publish_mode=1 )
							
							#publish unit pages#
								##############################################################################################
							course_unitxmlfile = self.doc_root + self.dict["courseidentifier"] + '/' + self.content_dict["topicidentifier"] + '/' + self.content_dict["sectionidentifier"] +'/'+ self.unitxmlfile
							if debug: print "course_unitxml:%s<br>\n" %(course_unitxmlfile)
							#try:
							if exists( course_unitxmlfile ): 
								doc_unit = readConfig( course_unitxmlfile )
								try:
									for node_unit in doc_unit["units"]:
										self.unit_dict.clear()
										#init unit dictionary#
										#self.read_unit_dict()
										self.content_dict.update( node_unit  )
										self.unit_dict.update( node_unit  )
										self.publish_unit_content( self.content_dict["publish_dir"] , publish_mode=1 )
								except:
									pass
								
							#except:
							#	pass
			#except:
			#	pass
			
			#publish to user's pc#
			#zip the file#
			#target_dir = self.doc_root + self.content_dict["courseidentifier"] + "/publish/" 
			if self.content_dict.has_key("zipfile"):
				target_dir = self.doc_root + self.content_dict["courseidentifier"] + "/publish/" + self.content_dict["zipfile"]
				zip_cmd = "cd %s; /usr/bin/zip -r ../%s * " % ( target_dir, self.content_dict["zipfile"] )
				#zip_cmd = "cd %s; /usr/bin/zip -r '%s' * " % ( target_dir, self.content_dict["zipfile"] )
				zipfile = "%s" %self.content_dict["zipfile"]
			else:
				target_dir = self.doc_root + self.content_dict["courseidentifier"] + "/publish/" + self.content_dict["publish_dir"]
				zip_cmd = "cd %s; /usr/bin/zip -r ../%s * " % ( target_dir, self.content_dict["publish_dir"] )
				zipfile = "%s" %self.content_dict["publish_dir"]
			system(zip_cmd)
			print "<html><head><meta HTTP-EQUIV='refresh' content='1; URL=/%s/publish/%s.zip'>  <title>%s.zip</title></head>" %( self.content_dict["courseidentifier"], zipfile, zipfile )
			print "<body>Your download should begin shortly.  If it does not, try <br><a HREF=\"/%s/publish/%s.zip\">%s.zip</a></body></html>" %( self.content_dict["courseidentifier"], zipfile, zipfile )
		else:
			print "Error, publish template not choosing"
			exit
		
	def delzipfile( self, form ):
		"""del course published zip file"""
		if form.has_key( "courseidentifier" ) and form.has_key( "fname" ):
			import re
			safesack = re.compile( r'../')
			courseidentifier = safesack.sub("", form["courseidentifier"].value )
			fname = safesack.sub("", form["fname"].value )
			targetfile = self.doc_root + courseidentifier + "/publish/" + fname
			#print targetfile + "<br>\n"
			if exists( targetfile ):
				remove( targetfile )
				self.show_publish_choice( form )
			else:
				print "Error, %s not exist" % form["fname"].value
				
		else:
			print "Error, course identifier or file name not specified"
		
##################################################################################
if __name__=="__main__":
	print "Content-type:text/html"
	print

	query = cgi.FieldStorage()
	if query.has_key("publish_dir"):
		am = PublishManager( query["publish_dir"].value )
	elif query.has_key("preview_dir"):
		am = PublishManager( query["preview_dir"].value )
	else:
		am = PublishManager()
		
	am.startcgi = "publish.pyg"
	if query.has_key("cmd"):
		cmd = query["cmd"].value
		if cmd == "publish_course_preview":
			am.publish_course_preview( query )
			
		elif cmd == "show_preview_choice":
			am.show_publish_choice( query )
		
		elif cmd == "publish_course":
			am.publish_course( query )
		elif cmd == "delzipfile":
			am.delzipfile( query )
		else:
			if query.has_key("preview_dir"):
				cm = CourseManager( query["preview_dir"].value )
			else:
				print "Error, preview choice is not identified"
				exit
			cm.theme_template = self.content_template_directory + query["preview_dir"].value +'/' +"index_content.template"
			cm.startcgi = publishcgi
			
			#show the publish button#
			str_button =  "<p><center><form action=%s method=post> <input type=hidden name=cmd value=%s><input type=hidden name=courseidentifier value=%s> <input type=hidden name=publish_dir value=%s> <input type=submit name=publish value='Use this template to publish'> to zip file:<input type=text name=zipfile  maxlength=40 size=20><p></form><p></center>" %( publishcgi, publish_cmd, query["courseidentifier"].value, query["preview_dir"].value) 
			print "%s" % str_button
			#show the preview content#
			cm.__class__.__dict__[cmd]( cm, query )
			

	else:
		am.show_publish_choice( query )
	#print am.__class__.__dict__ 
	

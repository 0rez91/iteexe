/**
 * plugin.js
 *
 * Released under LGPL License.
 * Copyright (c) 1999-2015 Ephox Corp. All rights reserved
 *
 * License: http://www.tinymce.com/license
 * Contributing: http://www.tinymce.com/contributing
 */
 
/**
 * "Title and Attribution" tab and player options by Ignacio Gros (http://gros.es/)
 * All changes are between "The New eXeLearning" comments.
 * The rest is just a copy of TinyMCE's plugins\media\plugin.js 
 * Released under Attribution-ShareAlike 4.0 International License.
 * License: http://creativecommons.org/licenses/by-sa/4.0/
 */ 

/*jshint maxlen:255 */
/*eslint max-len:0 */
/*global tinymce:true */

tinymce.PluginManager.add('exemedia', function(editor, url) {
	var urlPatterns = [
		{regex: /youtu\.be\/([\w\-.]+)/, type: 'iframe', w: 560, h: 314, url: '//www.youtube.com/embed/$1', allowFullscreen: true},
		{regex: /youtube\.com(.+)v=([^&]+)/, type: 'iframe', w: 560, h: 314, url: '//www.youtube.com/embed/$2', allowFullscreen: true},
		{regex: /youtube.com\/embed\/([a-z0-9\-_]+)/i, type: 'iframe', w: 560, h: 314, url: '//www.youtube.com/embed/$1', allowFullscreen: true},
		{regex: /vimeo\.com\/([0-9]+)/, type: 'iframe', w: 425, h: 350, url: '//player.vimeo.com/video/$1?title=0&byline=0&portrait=0&color=8dc7dc', allowfullscreen: true},
		{regex: /vimeo\.com\/(.*)\/([0-9]+)/, type: "iframe", w: 425, h: 350, url: "//player.vimeo.com/video/$2?title=0&amp;byline=0", allowfullscreen: true},
		{regex: /maps\.google\.([a-z]{2,3})\/maps\/(.+)msid=(.+)/, type: 'iframe', w: 425, h: 350, url: '//maps.google.com/maps/ms?msid=$2&output=embed"', allowFullscreen: false},
		{regex: /dailymotion\.com\/video\/([^_]+)/, type: 'iframe', w: 480, h: 270, url: '//www.dailymotion.com/embed/video/$1', allowFullscreen: true}
	];

	var embedChange = (tinymce.Env.ie && tinymce.Env.ie <= 8) ? 'onChange' : 'onInput';

	function guessMime(url) {
		url = url.toLowerCase();

		if (url.indexOf('.mp3') != -1) {
			return 'audio/mpeg';
		}

		if (url.indexOf('.wav') != -1) {
			return 'audio/wav';
		}

		if (url.indexOf('.mp4') != -1) {
			return 'video/mp4';
		}

		if (url.indexOf('.webm') != -1) {
			return 'video/webm';
		}

		if (url.indexOf('.ogg') != -1) {
			return 'video/ogg';
		}

		if (url.indexOf('.swf') != -1) {
			return 'application/x-shockwave-flash';
		}

		return '';
	}

	function getVideoScriptMatch(src) {
		var prefixes = editor.settings.media_scripts;

		if (prefixes) {
			for (var i = 0; i < prefixes.length; i++) {
				if (src.indexOf(prefixes[i].filter) !== -1) {
					return prefixes[i];
				}
			}
		}
	}

	function showDialog() {
		var win, width, height, data;

		var generalFormItems = [
			{
				name: 'source1',
				type: 'filepicker',
				filetype: 'media',
				size: 40,
				autofocus: true,
				label: 'Source',
				onchange: function(e) {
					tinymce.each(e.meta, function(value, key) {
						win.find('#' + key).value(value);
					});
				}
			}
		];

		function recalcSize(e) {
			var widthCtrl, heightCtrl, newWidth, newHeight;

			widthCtrl = win.find('#width')[0];
			heightCtrl = win.find('#height')[0];

			newWidth = widthCtrl.value();
			newHeight = heightCtrl.value();

			if (win.find('#constrain')[0].checked() && width && height && newWidth && newHeight) {
				if (e.control == widthCtrl) {
					newHeight = Math.round((newWidth / width) * newHeight);

					if (!isNaN(newHeight)) {
						heightCtrl.value(newHeight);
					}
				} else {
					newWidth = Math.round((newHeight / height) * newWidth);

					if (!isNaN(newWidth)) {
						widthCtrl.value(newWidth);
					}
				}
			}

			width = newWidth;
			height = newHeight;
		}

		if (editor.settings.media_alt_source !== false) {
			generalFormItems.push({name: 'source2', type: 'filepicker', filetype: 'media', size: 40, label: 'Alternative source'});
		}

		if (editor.settings.media_poster !== false) {
			generalFormItems.push({name: 'poster', type: 'filepicker', filetype: 'image', size: 40, label: 'Poster'});
		}

		if (editor.settings.media_dimensions !== false) {
			generalFormItems.push({
				type: 'container',
				label: 'Dimensions',
				layout: 'flex',
				align: 'center',
				spacing: 5,
				items: [
					{name: 'width', type: 'textbox', maxLength: 5, size: 3, onchange: recalcSize, ariaLabel: 'Width'},
					{type: 'label', text: 'x'},
					{name: 'height', type: 'textbox', maxLength: 5, size: 3, onchange: recalcSize, ariaLabel: 'Height'},
					{name: 'constrain', type: 'checkbox', checked: true, text: 'Constrain proportions'}
				]
			});
		}

		data = getData(editor.selection.getNode());
		width = data.width;
		height = data.height;

		var embedTextBox = {
			id: 'mcemediasource',
			type: 'textbox',
			flex: 1,
			name: 'embed',
			value: getSource(),
			multiline: true,
			label: 'Source'
		};

		function updateValueOnChange() {
			data = htmlToData(this.value());
			this.parent().parent().fromJSON(data);
		}
		
		// Advanced dialog shows general+advanced tabs
		// The New eXeLearning
		function getTabContent() {
			if (0==1) { // To do: if (imgElm) { ...
				return [
					{
						id: 'intructions',
						type: 'textbox',
						name: 'intructions',
						value: _("The header and the caption can't be edited from this dialog. You can change or remove them editing the text itself."),
						multiline: true,
						minHeight: 100,
						disabled: true,
						style: "border:0;padding:0;color:#333"
					}						
				]
			}
			return [
						{
							label: _("Header"),
							name: 'imageheader',
							id: 'imageheader',
							type: 'textbox'
						},
						{
							label: _("Image Title"),
							name: 'imagetitle',
							id: 'imagetitle',
							type: 'textbox'
						},
						{
							label: _("Title Link"),
							name: 'imagetitlelink',
							id: 'imagetitlelink',
							type: 'textbox'
						},
						{
							label: _("Source/Author"),
							name: 'authorname',
							id: 'authorname',
							type: 'textbox'
						},
						{
							label: _("Source/Author Link"),
							name: 'authornamelink',
							id: 'authornamelink',
							type: 'textbox'
						},
						{
							name: 'captionlicense',
							id: 'captionlicense',
							type: 'listbox',
							label: _("License"),
							values: [
								{text: _("Choose a license..."), value: ''},
								{text: _("Public Domain"), value: 'pd'},
								{text: "GNU/GPL", value: 'gnu-gpl'},
								{text: "Creative Commons ("+_("Public Domain")+")", value: 'CC0'},
								{text: "Creative Commons BY", value: 'CC-BY'},
								{text: "Creative Commons BY-SA", value: 'CC-BY-SA'},
								{text: "Creative Commons BY-ND", value: 'CC-BY-ND'},
								{text: "Creative Commons BY-NC", value: 'CC-BY-NC'},
								{text: "Creative Commons BY-NC-SA", value: 'CC-BY-NC-SA'},
								{text: "Creative Commons BY-NC-ND", value: 'CC-BY-NC-ND'},
								{text: "Copyright ("+_("All Rights Reserved")+")", value: 'copyright'}
							]
						},
						{
							type: 'label',
							text: _("You will not be able to edit the header or the caption from this dialog.")
						}						
					]
		}
		// / The New eXeLearning		

		embedTextBox[embedChange] = updateValueOnChange;

		win = editor.windowManager.open({
			// title: 'Insert/edit video',
			title: _("Insert/Edit Embedded Media"), // The New eXeLearning
			data: data,
			bodyType: 'tabpanel',
			body: [
				{
					title: 'General',
					type: "form",
					onShowTab: function() {
						data = htmlToData(this.next().find('#embed').value());
						this.fromJSON(data);
					},
					// The New eXeLearning
					// items: generalFormItems
					items: [
						{
							name: 'source1',
							type: 'filepicker',
							filetype: 'media',
							size: 40,
							autofocus: true,
							label: 'Source',
							onchange: function(e) {
								tinymce.each(e.meta, function(value, key) {
									win.find('#' + key).value(value);
								});
							}
						},					
						{
							type: 'container',
							label: 'Dimensions',
							layout: 'flex',
							align: 'center',
							spacing: 5,
							items: [
								{name: 'width', type: 'textbox', maxLength: 5, size: 3, onchange: recalcSize, ariaLabel: 'Width'},
								{type: 'label', text: 'x'},
								{name: 'height', type: 'textbox', maxLength: 5, size: 3, onchange: recalcSize, ariaLabel: 'Height'},
								{name: 'constrain', type: 'checkbox', checked: true, text: 'Constrain proportions'}
							]
						},
						{
							type: 'container',
							label: _('Options'),
							layout: 'flex',
							direction: 'column',
							spacing: 5,
							items: [
								{name: 'jsplayer', type: 'checkbox', checked: true, text: _("Use JavaScript player")},
								{name: 'usecontrols', type: 'checkbox', checked: true, text: _("Use Controls")},
								{name: 'autoplay', type: 'checkbox', checked: false, text: _("Use Autoplay")}						
							]
						}						
					]
					// / The New eXeLearning
				},

				{
					title: 'Embed',
					type: "container",
					layout: 'flex',
					direction: 'column',
					align: 'stretch',
					padding: 10,
					spacing: 10,
					onShowTab: function() {
						this.find('#embed').value(dataToHtml(this.parent().toJSON()));
					},
					items: [
						{
							type: 'label',
							text: 'Paste your embed code below:',
							forId: 'mcemediasource'
						},
						embedTextBox
					]
				}
				// The New eXeLearning
				,{
					title: _("Title and Attribution"),
					type: 'form',
					pack: 'start',
					items: getTabContent()
				}
				// / The New eXeLearning
			],
			onSubmit: function() {
				var beforeObjects, afterObjects, i, y;

				beforeObjects = editor.dom.select('img[data-mce-object]');
				// The New eXeLearning
				
				// editor.insertContent(dataToHtml(this.toJSON()));
				
					var html = dataToHtml(this.toJSON());
					// We replace autoplay so the video/audio does not play when we put it in #tmpWrapper
					html = html.replace('autoplay="autoplay"','exe-autoplay="exe-autoplay"')
					
					var tmpWrapper = jQuery("#tmpWrapper");
					if (tmpWrapper.length==0) {
						tmpWrapper = jQuery('<div id="tmpWrapper" style="display:none">'+html+'</div>');
						jQuery('body').append(tmpWrapper);
					} else {
						tmpWrapper.html(html);
					}
					
					var tmpTag = 'video'
					if (html.indexOf('<audio')==0) tmpTag = 'audio';
					var tmpMedia = jQuery(tmpTag,tmpWrapper);
					
					// JavaScript Player
					if (win.find("#jsplayer")[0].checked()) {
						tmpMedia.addClass("mediaelement");
					} else {
						tmpMedia.removeClass("mediaelement");
					}
					if (tmpMedia.attr("class")=="") tmpMedia.removeAttr("class");
					
					// Controls
					if (win.find("#usecontrols")[0].checked()) {
						tmpMedia.attr("controls","controls");
					} else {
						tmpMedia.removeAttr("controls");
					}

					// Auto-play
					if (win.find("#autoplay")[0].checked()) {
						tmpMedia.attr("exe-autoplay","exe-autoplay");
					} else {
						tmpMedia.removeAttr("exe-autoplay");
					}

					// Default dimensions
					var mediaWidth = win.find("#width").value();
					var mediaHeight = win.find("#height").value();
					if (tmpTag == 'video') {
						if (mediaWidth == "") mediaWidth = 320;
						if (mediaHeight == "") mediaHeight = 240;
					} else {
						if (mediaWidth == "") mediaWidth = 300;
						if (mediaHeight == "") mediaHeight = 32;
					}
					tmpMedia.attr("width",mediaWidth);
					tmpMedia.attr("height",mediaHeight);
					
					html = tmpWrapper.html();
					html = html.replace('exe-autoplay="exe-autoplay"','autoplay="autoplay"');
					
					// Title and Attribution
					var imageHeader = win.find("#imageheader")[0].value();
					var imageTitle = win.find("#imagetitle")[0].value();
					var imageTitleLink = win.find("#imagetitlelink")[0].value();
					var authorName = win.find("#authorname")[0].value();
					var authorNameLink = win.find("#authornamelink")[0].value();
					var captionLicense = win.find("#captionlicense")[0].value();

					// Add the wrapper if needed
					if (imageHeader!="" || imageTitle!="" || imageTitleLink!="" || authorName!="" || authorNameLink!="" || captionLicense!="") {
						var hText = "";
						var cText = "";
						var license = "";
						
						var figureTag = "div";
						var headerFigcaptionTag = "div";
						var footerFigcaptionTag = "div";
						if (parent.exe_export_format=="html5") {
							figureTag = "figure";
							if (imageTitle=="" && imageTitleLink=="" && authorName=="" && authorNameLink=="" && captionLicense=="") headerFigcaptionTag = "figcaption";
							footerFigcaptionTag = "figcaption";
						}                
						
						// Header
						if (imageHeader!="") {
							hText = "<"+headerFigcaptionTag+" class='figcaption header'><strong>"+imageHeader+"</strong></"+headerFigcaptionTag+">";
						}
						
						// Author and link
						if (authorName!="") {
							if (authorNameLink!="") {
								cText+="<a href='"+authorNameLink+"' target='_blank' class='author'>"+authorName+"</a>";
							} else {
								cText+="<span class='author'>"+authorName+"</span>";
							}
						} else {
							if (authorNameLink!="") {
								cText+="<a href='"+authorNameLink+"' target='_blank' class='author'>"+authorNameLink+"</a>";
							}
						}
						
						// Title and link
						if (imageTitle!="") {
							if (cText!="") cText+=". ";
							if (imageTitleLink!="") {
								cText+="<a href='"+imageTitleLink+"' target='_blank' class='title'><em>"+imageTitle+"</em></a>";
							} else {
								cText+="<span class='title'><em>"+imageTitle+"</em></span>";
							}
						} else {
							if (imageTitleLink!="") {
								if (cText!="") cText+=" - ";
								cText+="<a href='"+imageTitleLink+"' target='_blank' class='title'><em>"+imageTitleLink+"</em></a>";
							}
						}
						
						// License:
						var licenseLang = "en";
						var ccLink = "http://creativecommons.org/licenses/";
						var w = window.opener;
						if (!w) w = window.parent;
						if (w && w.document.getElementsByTagName) {
							var lang = w.document.getElementsByTagName("HTML")[0].lang;
							if (lang && lang != "") licenseLang = lang;
							if (lang!="en") ccLink += "?lang="+lang;
						}  
						
						if (captionLicense!="") {
							if (captionLicense=="pd") {
								license = "<span>"+_("Public Domain")+"</span>";
							} else if (captionLicense=="gnu-gpl") {
								license = "<a href='http://www.gnu.org/licenses/gpl.html' rel='license nofollow' target='_blank'>GNU/GPL</a>";
							} else if (captionLicense=="CC0") {
								license = "<a href='http://creativecommons.org/publicdomain/zero/1.0/deed."+licenseLang+"' rel='license nofollow' target='_blank' title='Creative Commons (CC0)'>CC0</a>";
							} else if (captionLicense=="copyright") {
								license = "<span>"+_("All Rights Reserved")+"</span>";
							} else {
								license = "<a href='"+ccLink+"' rel='license nofollow' target='_blank' title='"+captionLicense.replace("CC-","Creative Commons ")+"'>"+captionLicense.replace("CC-","CC ")+"</a>";
							}

							if (cText!="") {
								license = ' <span class="license"><span class="sep">(</span>'+license+'<span class="sep">)</span></span>';
							} else {
								license = '<span class="license"><span class="tit">'+_("License")+": </span>"+license+"</span>";
							}
							
						}
						
						var defaultPos = "position-center";
						// Use the "exealign" plugin to control the alignment
						// if (imageAlignment=="left" || imageAlignment=="right") defaultPos = "float-"+imageAlignment;
						var cssClass = "exe-figure exe-image "+defaultPos;
						if (captionLicense!="") cssClass += " license-"+captionLicense;
						var extraStyle="width:"+mediaWidth+"px;";

						var fText = "";
						if (cText!="" || license!="") fText = "<"+footerFigcaptionTag+" class='figcaption'>"+cText+license+"</"+footerFigcaptionTag+">";

						html = "<"+figureTag+" class='"+cssClass+"' style='"+extraStyle+"'>"+hText+html+fText+"</"+figureTag+"><br />";
						
					}					
					
					editor.insertContent(html);
				
				// / The New eXeLearning
				afterObjects = editor.dom.select('img[data-mce-object]');

				// Find new image placeholder so we can select it
				for (i = 0; i < beforeObjects.length; i++) {
					for (y = afterObjects.length - 1; y >= 0; y--) {
						if (beforeObjects[i] == afterObjects[y]) {
							afterObjects.splice(y, 1);
						}
					}
				}

				editor.selection.select(afterObjects[0]);
				editor.nodeChanged();
			}
		});
		
		// The New eXeLearning
		getPreviousValues(win);
		// / The New eXeLearning
	}

	// The New eXeLearning
	function getPreviousValues(win){
		
		var elm = editor.selection.getNode();
		
		if (!elm || elm.className.indexOf('mce-object ')!=0 || !elm.dataset) return;
		
		// jsplayer
		var jsplayer = elm.dataset.mcePClass;
		if (!jsplayer || (jsplayer && jsplayer.indexOf('mediaelement')==-1)) win.find("#jsplayer")[0].checked(false);
		
		// usecontrols
		var usecontrols = elm.dataset.mcePControls;
		if (!usecontrols || usecontrols!='controls') win.find("#usecontrols")[0].checked(false);	

		// autoplay
		var autoplay = elm.dataset.mcePAutoplay;
		if (autoplay && autoplay=='autoplay') win.find("#autoplay")[0].checked(true);	
			
	}
	// The New eXeLearning
	
	function getSource() {
		var elm = editor.selection.getNode();

		if (elm.getAttribute('data-mce-object')) {
			return editor.selection.getContent();
		}
	}

	function dataToHtml(data) {
		var html = '';

		if (!data.source1) {
			tinymce.extend(data, htmlToData(data.embed));
			if (!data.source1) {
				return '';
			}
		}

		if (!data.source2) {
			data.source2 = '';
		}

		if (!data.poster) {
			data.poster = '';
		}

		data.source1 = editor.convertURL(data.source1, "source");
		data.source2 = editor.convertURL(data.source2, "source");
		data.source1mime = guessMime(data.source1);
		data.source2mime = guessMime(data.source2);
		data.poster = editor.convertURL(data.poster, "poster");
		data.flashPlayerUrl = editor.convertURL(url + '/moxieplayer.swf', "movie");

		tinymce.each(urlPatterns, function(pattern) {
			var match, i, url;

			if ((match = pattern.regex.exec(data.source1))) {
				url = pattern.url;

				for (i = 0; match[i]; i++) {
					/*jshint loopfunc:true*/
					/*eslint no-loop-func:0 */
					url = url.replace('$' + i, function() {
						return match[i];
					});
				}

				data.source1 = url;
				data.type = pattern.type;
				data.allowFullscreen = pattern.allowFullscreen;
				data.width = data.width || pattern.w;
				data.height = data.height || pattern.h;
			}
		});

		if (data.embed) {
			html = updateHtml(data.embed, data, true);
		} else {
			var videoScript = getVideoScriptMatch(data.source1);
			if (videoScript) {
				data.type = 'script';
				data.width = videoScript.width;
				data.height = videoScript.height;
			}

			data.width = data.width || 300;
			data.height = data.height || 150;

			tinymce.each(data, function(value, key) {
				data[key] = editor.dom.encode(value);
			});

			if (data.type == "iframe") {
				var allowFullscreen = data.allowFullscreen ? ' allowFullscreen="1"' : '';
				html += '<iframe src="' + data.source1 + '" width="' + data.width + '" height="' + data.height + '"' + allowFullscreen + '></iframe>';
			} else if (data.source1mime == "application/x-shockwave-flash") {
				html += '<object data="' + data.source1 + '" width="' + data.width + '" height="' + data.height + '" type="application/x-shockwave-flash">';

				if (data.poster) {
					html += '<img src="' + data.poster + '" width="' + data.width + '" height="' + data.height + '" />';
				}

				html += '</object>';
			} else if (data.source1mime.indexOf('audio') != -1) {
				if (editor.settings.audio_template_callback) {
					html = editor.settings.audio_template_callback(data);
				} else {
					html += (
						'<audio controls="controls" src="' + data.source1 + '">' +
							(data.source2 ? '\n<source src="' + data.source2 + '"' + (data.source2mime ? ' type="' + data.source2mime + '"' : '') + ' />\n' : '') +
						'</audio>'
					);
				}
			} else if (data.type == "script") {
				html += '<script src="' + data.source1 + '"></script>';
			} else {
				if (editor.settings.video_template_callback) {
					html = editor.settings.video_template_callback(data);
				} else {
					html = (
						'<video width="' + data.width + '" height="' + data.height + '"' + (data.poster ? ' poster="' + data.poster + '"' : '') + ' controls="controls">\n' +
							'<source src="' + data.source1 + '"' + (data.source1mime ? ' type="' + data.source1mime + '"' : '') + ' />\n' +
							(data.source2 ? '<source src="' + data.source2 + '"' + (data.source2mime ? ' type="' + data.source2mime + '"' : '') + ' />\n' : '') +
						'</video>'
					);
				}
			}
		}

		return html;
	}

	function htmlToData(html) {
		var data = {};

		new tinymce.html.SaxParser({
			validate: false,
			allow_conditional_comments: true,
			special: 'script,noscript',
			start: function(name, attrs) {
				if (!data.source1 && name == "param") {
					data.source1 = attrs.map.movie;
				}

				if (name == "iframe" || name == "object" || name == "embed" || name == "video" || name == "audio") {
					if (!data.type) {
						data.type = name;
					}

					data = tinymce.extend(attrs.map, data);
				}

				if (name == "script") {
					var videoScript = getVideoScriptMatch(attrs.map.src);
					if (!videoScript) {
						return;
					}

					data = {
						type: "script",
						source1: attrs.map.src,
						width: videoScript.width,
						height: videoScript.height
					};
				}

				if (name == "source") {
					if (!data.source1) {
						data.source1 = attrs.map.src;
					} else if (!data.source2) {
						data.source2 = attrs.map.src;
					}
				}

				if (name == "img" && !data.poster) {
					data.poster = attrs.map.src;
				}
			}
		}).parse(html);

		data.source1 = data.source1 || data.src || data.data;
		data.source2 = data.source2 || '';
		data.poster = data.poster || '';

		return data;
	}

	function getData(element) {
		if (element.getAttribute('data-mce-object')) {
			return htmlToData(editor.serializer.serialize(element, {selection: true}));
		}

		return {};
	}

	function sanitize(html) {
		if (editor.settings.media_filter_html === false) {
			return html;
		}

		var writer = new tinymce.html.Writer(), blocked;

		new tinymce.html.SaxParser({
			validate: false,
			allow_conditional_comments: false,
			special: 'script,noscript',

			comment: function(text) {
				writer.comment(text);
			},

			cdata: function(text) {
				writer.cdata(text);
			},

			text: function(text, raw) {
				writer.text(text, raw);
			},

			start: function(name, attrs, empty) {
				blocked = true;

				if (name == 'script' || name == 'noscript') {
					return;
				}

				for (var i = 0; i < attrs.length; i++) {
					if (attrs[i].name.indexOf('on') === 0) {
						return;
					}

					if (attrs[i].name == 'style') {
						attrs[i].value = editor.dom.serializeStyle(editor.dom.parseStyle(attrs[i].value), name);
					}
				}

				writer.start(name, attrs, empty);
				blocked = false;
			},

			end: function(name) {
				if (blocked) {
					return;
				}

				writer.end(name);
			}
		}, new tinymce.html.Schema({})).parse(html);

		return writer.getContent();
	}

	function updateHtml(html, data, updateAll) {
		var writer = new tinymce.html.Writer();
		var sourceCount = 0, hasImage;

		function setAttributes(attrs, updatedAttrs) {
			var name, i, value, attr;

			for (name in updatedAttrs) {
				value = "" + updatedAttrs[name];

				if (attrs.map[name]) {
					i = attrs.length;
					while (i--) {
						attr = attrs[i];

						if (attr.name == name) {
							if (value) {
								attrs.map[name] = value;
								attr.value = value;
							} else {
								delete attrs.map[name];
								attrs.splice(i, 1);
							}
						}
					}
				} else if (value) {
					attrs.push({
						name: name,
						value: value
					});

					attrs.map[name] = value;
				}
			}
		}

		new tinymce.html.SaxParser({
			validate: false,
			allow_conditional_comments: true,
			special: 'script,noscript',

			comment: function(text) {
				writer.comment(text);
			},

			cdata: function(text) {
				writer.cdata(text);
			},

			text: function(text, raw) {
				writer.text(text, raw);
			},

			start: function(name, attrs, empty) {
				switch (name) {
					case "video":
					case "object":
					case "embed":
					case "img":
					case "iframe":
						setAttributes(attrs, {
							width: data.width,
							height: data.height
						});
						break;
				}

				if (updateAll) {
					switch (name) {
						case "video":
							setAttributes(attrs, {
								poster: data.poster,
								src: ""
							});

							if (data.source2) {
								setAttributes(attrs, {
									src: ""
								});
							}
							break;

						case "iframe":
							setAttributes(attrs, {
								src: data.source1
							});
							break;

						case "source":
							sourceCount++;

							if (sourceCount <= 2) {
								setAttributes(attrs, {
									src: data["source" + sourceCount],
									type: data["source" + sourceCount + "mime"]
								});

								if (!data["source" + sourceCount]) {
									return;
								}
							}
							break;

						case "img":
							if (!data.poster) {
								return;
							}

							hasImage = true;
							break;
					}
				}

				writer.start(name, attrs, empty);
			},

			end: function(name) {
				if (name == "video" && updateAll) {
					for (var index = 1; index <= 2; index++) {
						if (data["source" + index]) {
							var attrs = [];
							attrs.map = {};

							if (sourceCount < index) {
								setAttributes(attrs, {
									src: data["source" + index],
									type: data["source" + index + "mime"]
								});

								writer.start("source", attrs, true);
							}
						}
					}
				}

				if (data.poster && name == "object" && updateAll && !hasImage) {
					var imgAttrs = [];
					imgAttrs.map = {};

					setAttributes(imgAttrs, {
						src: data.poster,
						width: data.width,
						height: data.height
					});

					writer.start("img", imgAttrs, true);
				}

				writer.end(name);
			}
		}, new tinymce.html.Schema({})).parse(html);

		return writer.getContent();
	}

	editor.on('ResolveName', function(e) {
		var name;

		if (e.target.nodeType == 1 && (name = e.target.getAttribute("data-mce-object"))) {
			e.name = name;
		}
	});

	function retainAttributesAndInnerHtml(sourceNode, targetNode) {
		var attrName, attrValue, attribs, ai, innerHtml;

		// Prefix all attributes except width, height and style since we
		// will add these to the placeholder
		attribs = sourceNode.attributes;
		ai = attribs.length;
		while (ai--) {
			attrName = attribs[ai].name;
			attrValue = attribs[ai].value;

			if (attrName !== "width" && attrName !== "height" && attrName !== "style") {
				if (attrName == "data" || attrName == "src") {
					attrValue = editor.convertURL(attrValue, attrName);
				}

				targetNode.attr('data-mce-p-' + attrName, attrValue);
			}
		}

		// Place the inner HTML contents inside an escaped attribute
		// This enables us to copy/paste the fake object
		innerHtml = sourceNode.firstChild && sourceNode.firstChild.value;
		if (innerHtml) {
			targetNode.attr("data-mce-html", escape(innerHtml));
			targetNode.firstChild = null;
		}
	}

	function createPlaceholderNode(node) {
		var placeHolder, name = node.name;

		placeHolder = new tinymce.html.Node('img', 1);
		placeHolder.shortEnded = true;

		retainAttributesAndInnerHtml(node, placeHolder);

		placeHolder.attr({
			width: node.attr('width') || "300",
			height: node.attr('height') || (name == "audio" ? "30" : "150"),
			style: node.attr('style'),
			src: tinymce.Env.transparentSrc,
			"data-mce-object": name,
			"class": "mce-object mce-object-" + name
		});

		return placeHolder;
	}

	function createPreviewNode(node) {
		var previewWrapper, previewNode, shimNode, name = node.name;

		previewWrapper = new tinymce.html.Node('span', 1);
		previewWrapper.attr({
			contentEditable: 'false',
			style: node.attr('style'),
			"data-mce-object": name,
			"class": "mce-preview-object mce-object-" + name
		});

		retainAttributesAndInnerHtml(node, previewWrapper);

		previewNode = new tinymce.html.Node(name, 1);
		previewNode.attr({
			src: node.attr('src'),
			allowfullscreen: node.attr('allowfullscreen'),
			width: node.attr('width') || "300",
			height: node.attr('height') || (name == "audio" ? "30" : "150"),
			frameborder: '0'
		});

		shimNode = new tinymce.html.Node('span', 1);
		shimNode.attr('class', 'mce-shim');

		previewWrapper.append(previewNode);
		previewWrapper.append(shimNode);

		return previewWrapper;
	}

	editor.on('preInit', function() {
		// Make sure that any messy HTML is retained inside these
		var specialElements = editor.schema.getSpecialElements();
		tinymce.each('video audio iframe object'.split(' '), function(name) {
			specialElements[name] = new RegExp('<\/' + name + '[^>]*>', 'gi');
		});

		// Allow elements
		//editor.schema.addValidElements('object[id|style|width|height|classid|codebase|*],embed[id|style|width|height|type|src|*],video[*],audio[*]');

		// Set allowFullscreen attribs as boolean
		var boolAttrs = editor.schema.getBoolAttrs();
		tinymce.each('webkitallowfullscreen mozallowfullscreen allowfullscreen'.split(' '), function(name) {
			boolAttrs[name] = {};
		});

		// Converts iframe, video etc into placeholder images
		editor.parser.addNodeFilter('iframe,video,audio,object,embed,script', function(nodes) {
			var i = nodes.length, node, placeHolder, videoScript;

			while (i--) {
				node = nodes[i];
				if (!node.parent) {
					continue;
				}

				if (node.parent.attr('data-mce-object')) {
					continue;
				}

				if (node.name == 'script') {
					videoScript = getVideoScriptMatch(node.attr('src'));
					if (!videoScript) {
						continue;
					}
				}

				if (videoScript) {
					if (videoScript.width) {
						node.attr('width', videoScript.width.toString());
					}

					if (videoScript.height) {
						node.attr('height', videoScript.height.toString());
					}
				}

				if (node.name == 'iframe' && editor.settings.media_live_embeds !== false && tinymce.Env.ceFalse) {
					placeHolder = createPreviewNode(node);
				} else {
					placeHolder = createPlaceholderNode(node);
				}

				node.replace(placeHolder);
			}
		});

		// Replaces placeholder images with real elements for video, object, iframe etc
		editor.serializer.addAttributeFilter('data-mce-object', function(nodes, name) {
			var i = nodes.length, node, realElm, ai, attribs, innerHtml, innerNode, realElmName, className;

			while (i--) {
				node = nodes[i];
				if (!node.parent) {
					continue;
				}

				realElmName = node.attr(name);
				realElm = new tinymce.html.Node(realElmName, 1);

				// Add width/height to everything but audio
				if (realElmName != "audio" && realElmName != "script") {
					className = node.attr('class');
					if (className && className.indexOf('mce-preview-object') !== -1) {
						realElm.attr({
							width: node.firstChild.attr('width'),
							height: node.firstChild.attr('height')
						});
					} else {
						realElm.attr({
							width: node.attr('width'),
							height: node.attr('height')
						});
					}
				}

				realElm.attr({
					style: node.attr('style')
				});

				// Unprefix all placeholder attributes
				attribs = node.attributes;
				ai = attribs.length;
				while (ai--) {
					var attrName = attribs[ai].name;

					if (attrName.indexOf('data-mce-p-') === 0) {
						realElm.attr(attrName.substr(11), attribs[ai].value);
					}
				}

				if (realElmName == "script") {
					realElm.attr('type', 'text/javascript');
				}

				// Inject innerhtml
				innerHtml = node.attr('data-mce-html');
				if (innerHtml) {
					innerNode = new tinymce.html.Node('#text', 3);
					innerNode.raw = true;
					innerNode.value = sanitize(unescape(innerHtml));
					realElm.append(innerNode);
				}

				node.replace(realElm);
			}
		});
	});

	editor.on('click keyup', function() {
		var selectedNode = editor.selection.getNode();

		if (selectedNode && editor.dom.hasClass(selectedNode, 'mce-preview-object')) {
			if (editor.dom.getAttrib(selectedNode, 'data-mce-selected')) {
				selectedNode.setAttribute('data-mce-selected', '2');
			}
		}
	});

	editor.on('ObjectSelected', function(e) {
		var objectType = e.target.getAttribute('data-mce-object');

		if (objectType == "audio" || objectType == "script") {
			e.preventDefault();
		}
	});

	editor.on('objectResized', function(e) {
		var target = e.target, html;

		if (target.getAttribute('data-mce-object')) {
			html = target.getAttribute('data-mce-html');
			if (html) {
				html = unescape(html);
				target.setAttribute('data-mce-html', escape(
					updateHtml(html, {
						width: e.width,
						height: e.height
					})
				));
			}
		}
	});

	editor.addButton('exemedia', {
		icon: 'media',
		// tooltip: 'Insert/edit video',
		tooltip: _("Insert/Edit Embedded Media"), // The New eXeLearning
		onclick: showDialog,
		stateSelector: ['img[data-mce-object]', 'span[data-mce-object]']
	});

	editor.addMenuItem('exemedia', {
		icon: 'media',
		// text: 'Insert/edit video',
		text: _("Insert/Edit Embedded Media"), // The New eXeLearning
		onclick: showDialog,
		context: 'insert',
		prependToContext: true
	});
	
	// The New eXeLearning
	editor.on('init', function(e) {
		editor.dom.loadCSS(url + "/css/content.css");
	});	
	// / The New eXeLearning	

	editor.on('setContent', function() {
		// TODO: This shouldn't be needed there should be a way to mark bogus
		// elements so they are never removed except external save
		editor.$('span.mce-preview-object').each(function(index, elm) {
			var $elm = editor.$(elm);

			if ($elm.find('span.mce-shim', elm).length === 0) {
				$elm.append('<span class="mce-shim"></span>');
			}
		});
	});

	editor.addCommand('mceMedia', showDialog);

	this.showDialog = showDialog;
});

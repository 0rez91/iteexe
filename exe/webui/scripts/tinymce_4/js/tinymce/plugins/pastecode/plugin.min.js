/**
 * plugin.min.js
 *
 * Released under Attribution-ShareAlike 4.0 International License.
 * Author: Ignacio Gros (http://gros.es/) for http://exelearning.net/
 *
 * License: http://creativecommons.org/licenses/by-sa/4.0/
 */

/**
 * Insert HTML code or HTML code as text
 * Don't forget to add some styles to theme/site so the code has the same appearance everywhere (see eXe's base.css file)
 */
tinymce.PluginManager.add('pastecode', function(editor, url) {
	
	PasteCodeDialog = {
		
		// Load the previous values (if needed)
		getValues : function(){
			
			PasteCodeDialog.toggle("highlightOptions",false);
			
			var sel = editor.selection;
			var v = sel.getContent({format : 'text'});
			var node = sel.getNode();			
			
			this.initialValue = v;
			this.isCodeTag = false;
			this.isInPRE = false;
			this.isWrapped = false;	

			if (node.nodeName=="CODE"){
				this.isCodeTag = true;
				var c = node.innerHTML;
				c = c.replace(/&amp;/g,'&').replace(/&lt;/g,'<').replace(/&gt;/g,'>');
				v = c;
				var wrapper = win.find('#wrapper')[0];
				// Check if it's  <pre><code></code></pre> and if it has wrapper
				var pre = node.parentNode;
				if (pre.nodeName == "PRE") {
					
					this.isInPRE = true;
					wrapper.checked(false);
					
					var block = pre.parentNode.parentNode;
					if (block.nodeName=="DIV" && block.className=="pre-code") {
						this.isWrapped = true;
						wrapper.checked(true);
					}
					
				} else {
					wrapper.checked(false);
				}				
			}
			win.find('#htmlSource')[0].value(v);
		},
		
		// Create or update the content
		insert : function(content){
			
			if (content=="") return "";
			
			var t = content.replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;');
			var c = "<pre><code>"+t+"</code></pre><br />";
			
			// Include wrapper if checked
			var wrapper = win.find('#wrapper')[0].checked();
			if (wrapper) {
				c = "<div class='pre-code'><div><pre><code>"+t+"</code></pre></div></div><br />";
			} else {
				if (this.initialValue!="") c = "<code>"+t+"</code>";
			}
			
			// Insert the content
			if (this.isCodeTag==false) {
				
				// New content
				editor.insertContent(c);
			
			} else {
				
				// Upate the selected content
				var ed = editor;
				var node = ed.selection.getNode();
				var pre = node.parentNode;
				var block = pre.parentNode.parentNode;
				
				// The  current CODE tag is inside a PRE tag
				if (this.isInPRE) {
					
					if (wrapper) {
						if (this.isWrapped) {
							// It's wrapped, so we just update the content
							node.innerHTML = t;
						} else {
							// It's a PRE tag, but not wrapped, so we wrap it
							ed.dom.remove(pre);
							ed.execCommand('mceInsertContent', false, c);
						}
					} else {
						if (this.isWrapped) {
							// It was wrapped, so we remove the wrapper and just add the new content
							ed.dom.remove(block);
							ed.execCommand('mceInsertContent', false, c);
						} else {
							// It has no wrapper, so we just update the content
							node.innerHTML = t;
						}
					}
					
				} else {
					
					// The  current CODE tag is not inside a PRE tag
					if (wrapper) {
						// It has no wrapper, so we wrap it
						ed.dom.remove(node);
						ed.execCommand('mceInsertContent', false, c);
					} else {
						// We just update the content
						node.innerHTML = t;
					}
					
				}
			}
			
		},
		
		// Syntax highlighter			
		toggle : function(id,val) {
			
			// Hide or show the block
			var display = "block";
			if (val==false) display = "none";
			var block = document.getElementById(id);
			block.style.display = display;
			
			var optionsBlock = block;
			if (id=="highlight") optionsBlock = document.getElementById("highlightOptions");			
			var isVisible = jQuery(optionsBlock).is(":visible");
			
			if (id=="highlight" && val==false) {
				if (isVisible) {
					PasteCodeDialog.toggle("highlightOptions",false);

				}
				return;
			}
			
			// As TinyMCE reflow is not triggered, we have to move some elements
			
			// Get the height of the hidden/shown block
			var blockHeight = parseFloat(block.style.height);
			
			// Get the next blocks and ther height
			var label = jQuery("label[for=htmlSource]");
			var field = jQuery("#htmlSource");
			var labelTop = parseFloat(label.css("top"));
			var fieldTop = parseFloat(field.css("top"));
			
			// Update the next blocks height
			if (val==false) {
				win.find('#highlight')[0].checked(false);
				label.css("top",(labelTop-blockHeight)+"px");
				field.css("top",(fieldTop-blockHeight)+"px");
			} else {
				if (!isVisible) return;
				label.css("top",(labelTop+blockHeight)+"px");
				field.css("top",(fieldTop+blockHeight)+"px");
			}			
			
		},
		
		openCodeDialog : function(){
			
			// Open the window and load the previous values
			win = editor.windowManager.open({
				title: _('Insert HTML code as text'),
				width: 600,
				height: 350,
				body: [
					{
						type: 'container',
						layout: 'flex',
						direction: 'row',
						align: 'center',
						spacing: 15,
						minHeight: 35,
						items: [
							{
								name: 'wrapper', 
								id: 'wrapper',
								type: 'checkbox', 
								checked: true, 
								text: _('Include wrapper (improves presentation)'),
								onchange: function(){
									PasteCodeDialog.toggle('highlight',this.state.get("checked"))
								}								
							},
							{
								name: 'highlight', 
								id: 'highlight',
								type: 'checkbox', 
								checked: false, 
								text: _('Highlight syntax'),
								onchange: function(){
									PasteCodeDialog.toggle('highlightOptions',this.state.get("checked"))
								}
							}							
						]						
					},
					{
						type: 'container',
						id: 'highlightOptions',
						layout: 'flex',
						direction: 'column',
						align: 'left',
						spacing: 15,
						minHeight: 80,
						items: [
						
							{
								type: 'container',
								id: 'highlightOptionsA',
								layout: 'flex',
								direction: 'row',
								align: 'center',
								spacing: 15,
								items: [
									{
										type: 'label',
										text: _('Markup language'),
										forId: 'highlightLang'
									},						
									{
										type: 'listbox',
										minWidth: 150,
										name: 'highlightLang',
										id: 'highlightLang',
										'values': [
											{text: _('-- Not Set --'), value: ''},
											{text: _('Markup (HTML, etc.)'), value: 'markup'},
											{text: 'ASP.net', value: 'aspnet'},
											{text: _('C type'), value: 'clike'},
											{text: 'C', value: 'c'},
											{text: 'C++', value: 'cpp'},
											{text: 'CSS', value: 'css'},
											{text: 'Java', value: 'java'},
											{text: 'JavaScript', value: 'js'},
											{text: 'JSON', value: 'json'},
											{text: 'LaTeX', value: 'latex'},
											{text: 'Pascal', value: 'pascal'},
											{text: 'Perl', value: 'perl'},
											{text: 'PHP', value: 'php'},
											{text: 'Processing', value: 'processing'},
											{text: 'Python', value: 'python'},
											{text: 'R', value: 'r'},
											{text: 'Ruby', value: 'ruby'},
											{text: 'SQL', value: 'sql'}
										]
										// , value: '3'
									},
									{
										type: 'label',
										text: _('Appearance'),
										forId: 'highlightTheme'
									},						
									{
										type: 'listbox',
										minWidth: 150,
										name: 'highlightTheme',
										id: 'highlightTheme',
										'values': [
											{text: _('Light'), value: ''},
											{text: _('Dark'), value: 'code-style-2'}
										]
									}
								]
							},						
							{
								type: 'container',
								id: 'highlightOptionsB',
								layout: 'flex',
								direction: 'row',
								align: 'center',
								spacing: 15,
								items: [
									{
										name: 'highlightLineNo', 
										id: 'highlightLineNo',
										type: 'checkbox', 
										checked: false, 
										text: _('Line numbers')							
									},
									{
										type: 'label',
										text: _('Line highlight'),
										forId: 'highlightLines'
									},
									{
										type: 'textbox',
										id: 'highlightLines',
										name: 'highlightLines',
										minWidth: 150
									},
									{
										type: 'label',
										text: _('Example')+": 1,5-8,11"
									}									
								]
							}
						]
					},
					{
						type: 'label',
						text: _('Use CTRL+V on your keyboard to paste the code into the window.'),
						forId: 'htmlSource'
					},
					{
						id: 'htmlSource',
						type: 'textbox',
						name: 'htmlSource',
						minHeight: 150,
						// value: ...(),
						multiline: true
					}
				],
				onsubmit: function(e) {
					// Insert content when the window form is submitted
					PasteCodeDialog.insert(e.data.htmlSource);
				}
			});
			PasteCodeDialog.getValues();
			
		}, // openCodeDialog
		
		activateButton : function(node) {
			
			var nodeName = node.nodeName;
			var activate = false;
			var parentDIVs = editor.dom.getParents(node, 'div');
			
			if (nodeName=="PRE" || nodeName=="CODE") {
				if (parentDIVs.length>1) {
					for (var i=0;i<parentDIVs.length;i++) {
						if (parentDIVs[i].className.indexOf("pre-code")!=-1) activate = true;
					}
				}
			}
			
			return activate;
			
		},

		openHTMLDialog : function(){

			// Open the window
			win = editor.windowManager.open({
				title: _('Paste HTML fragment (embed code)'),
				width: 500,
				height: 222,
				body: [
					{
						type: 'label',
						text: _('Use CTRL+V on your keyboard to paste the code into the window.'),
						forId: 'htmlSource'
					},
					{
						id: 'htmlSource',
						type: 'textbox',
						name: 'htmlSource',
						minHeight: 150,
						// value: ...(),
						multiline: true
					}
				],
				onsubmit: function(e) {
					// Insert content when the window form is submitted
					editor.execCommand('mceInsertContent', false, e.data.htmlSource);
				}
			});		
		
		}
		
	} // PasteCodeDialog	
	
	editor.addButton('pastecode', {
		image: url + '/img/pastecode.png',
		tooltip: _('Insert HTML code as text'),
		onclick: PasteCodeDialog.openCodeDialog,
		onPostRender: function() {
			var ctrl = this;
			editor.on('NodeChange', function(e) {
				ctrl.active(PasteCodeDialog.activateButton(e.element));
			});
		}		
	});
	
	editor.addButton('pastehtml', {
		image: url + '/img/pastehtml.png',
		tooltip: _('Paste HTML fragment (embed code)'),
		onclick: PasteCodeDialog.openHTMLDialog		
	});	
	
	editor.addMenuItem('pastecode', {
		// icon: 'image',
		text: _('Insert HTML code as text'),
		onclick: PasteCodeDialog.openCodeDialog,
		context: 'insert'
	});
	
	editor.on('init', function(e) {
		editor.dom.loadCSS(url + "/css/content.css");
	});
	
});
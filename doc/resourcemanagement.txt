
MainPage    
    handleInsertPackage(self, client, filename):
        package = self._loadPackage(client, filename)
        insertNode = package.root
        insertNode.mergeIntoPackage(self.package)
        insertNode.move(self.package.currentNode)

    handleExportPackage(self, client, filename):
        package = Package(filename)
        extractNode = self.package.currentNode.clone()
        extractNode.mergeIntoPackage(package)
        package.root = extractNode
        package.save()
       
Node
  clone(self)
      return copy.deepcopy(self)

  mergeIntoPackage(self, package)
      self._package = package
      self._id      = package._regNewNode(self)
        
      for idevice in self.idevices
          oldResources = idevice.resources
          idevice.resources = []
          for oldResource in oldResources
              newResource = package.addResource(oldResource)
              if newResource != oldResources:
                  toNotify.add(newResource, oldResource)
          idevice.resources.notifyChanges(toNotify)

      for child in self.children:
          child.setPackage(package)

Resource
  filename
  delete()

Package
  addResource(self, filename)
    if resourceDir
    returns Resource
  + resDict {filename : Resource object}


Idevice

ResourceList

Resource
  __str__()
  del()



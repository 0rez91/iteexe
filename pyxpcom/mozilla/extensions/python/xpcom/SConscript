import os

# Choose a python version
PYTHON_VER = '2.4'

# Where header files are found
CPPPATH = [
    '/usr/include',
    '/usr/include/firefox',
    '/usr/include/firefox/string',
    '/usr/include/firefox/xpcom',
    '/usr/include/firefox/nspr',
    '/usr/include/python%s' % PYTHON_VER,
    '/usr/lib/python%s/config' % PYTHON_VER,
    ]

# What's already defined
CPPDEFINES = [
    'IS_COMPONENT',
    'MOZILLA_INTERNAL_API',
    'FORCE_SHARED_LIB',
    'FORCE_USE_PIC',
    ('PYTHON_SO', r'\"libpython%s.so\"' % PYTHON_VER),
    ]

# C++ Flags
CXXFLAGS = [
    '-fno-rtti', '-fno-exceptions', '-Wall', '-Wconversion', '-Wpointer-arith', '-Wcast-align',
    '-Woverloaded-virtual', '-Wsynth', '-Wno-ctor-dtor-privacy', '-Wno-non-virtual-dtor', '-Wno-long-long',
    '-pedantic', '-fshort-wchar', '-pthread', '-pipe', '-DNDEBUG',
    '-DTRIMMED', '-O2', '-fPIC',
    '-Wl,-z,defs',
    '-Wl,-h,lib_xpcom.so',
    ]

# Where libraries can be found
LIBPATH = [
    '/usr/lib',
    '/usr/lib/firefox',
    '/usr/lib/python%s' % PYTHON_VER,
    ]

# How to compile .pyc and .pyo files
pycBuilder = Builder(action = '/usr/bin/python%s -c "import py_compile; py_compile.compile(\'$SOURCE\')"' % PYTHON_VER, suffix = '.pyc', src_suffix = '.py')
pyoBuilder = Builder(action = '/usr/bin/python%s -O -c "import py_compile; py_compile.compile(\'$SOURCE\')"' % PYTHON_VER, suffix = '.pyo', src_suffix = '.py')
BUILDERS = {'Pyc': pycBuilder, 'Pyo': pyoBuilder}

# This is our build envrionment
Import('env')
env.Append(CPPPATH=CPPPATH)
env.Append(CPPDEFINES=CPPDEFINES)
env.Append(CXXFLAGS=CXXFLAGS)
env.Append(LIBPATH=LIBPATH)
env.Append(BUILDERS=BUILDERS)

# Check all the stuff we need is around
conf = Configure(env)
# Find Python deps
if not conf.CheckHeader('Python.h'):
    print 'Please install python include files'
    Exit(1)
if not conf.CheckLib('python'+PYTHON_VER):
    print 'Please install python lib'
    Exit(1)
# Find mozilla deps
if not conf.CheckCXXHeader('nsXPCOM.h'):
    print 'Need mozilla xpcom headers'
    Exit(1)
if not conf.CheckLib('xpcom'):
    print 'Need mozilla xpcom library'
    Exit(1)
env = conf.Finish()

# Build the python stuff

pys = [
	'__init__.py',
	'components.py',
	'file.py',
	'nsError.py',
	'register.py',
	'xpcom_consts.py',
	'xpt.py',
	]
pycs = map(env.Pyc, pys)
pyos = map(env.Pyo, pys)
allPyFiles = pys + pycs + pyos
#
# Do an install if necessary
# Find the installation place

env.Import('installDir')
dist = env.Install('#dist/pyxpcom', allPyFiles)
install = env.Install(os.path.join(installDir, 'pyxpcom'), allPyFiles)
Export('env dist install PYTHON_VER')

# Build the other python libs
SConscript('client/SConscript')
SConscript('server/SConscript')
SConscript('tools/SConscript')

# Build the .so/.pyd and the loader component
SConscript('src/SConscript')

# Build the test component
SConscript('test/SConscript')

Return('dist install')
